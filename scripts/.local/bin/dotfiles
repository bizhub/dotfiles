#!/usr/bin/env bash

# set -x

export DOTFILES_PATH="${DOTFILES_PATH:-$HOME/dotfiles}"

GREEN='\e[0;32m'
YELLOW='\e[0;33m'
RED='\e[0;31m'
BLUE='\e[0;34m'
BOLD='\e[1m'
NC='\e[0m'

usage() {
    echo " ____   ___ _____ _____ ___ _     _____ ____"
    echo "|  _ \ / _ \_   _|  ___|_ _| |   | ____/ ___|"
    echo "| | | | | | || | | |_   | || |   |  _| \___ \ "
    echo "| |_| | |_| || | |  _|  | || |___| |___ ___) |"
    echo "|____/ \___/ |_| |_|   |___|_____|_____|____/"
    echo 
    echo "Bizhub dotfiles manager (with a few extras)"
    echo
    echo -e "${YELLOW}Usage:${NC} dotfiles [command] [options]"
    echo
    echo -e "${YELLOW}Commands:"
    echo -e "   ${GREEN}pull${NC}            Pull latest changes from remote."
    echo -e "   ${GREEN}stow${NC}            Stow dotfiles."
    echo -e "   ${GREEN}unstow${NC}          Unstow dotfiles."
    echo
    echo -e "   ${GREEN}arch:setup${NC}      Install packages on Arch."
    echo -e "   ${GREEN}vp:install${NC}      Install vim plug."
    echo
    echo -e "${YELLOW}Options:"
    echo -e "   ${GREEN}--help${NC}          Display this help message."
    echo -e "   ${GREEN}-v, --version${NC}   Display the version number."
    echo
    echo -e "${YELLOW}Environment variables:"
    echo -e "   ${GREEN}DOTFILES_PATH${NC}   Path to dotfiles folder"
    exit 0
}

check_if_dotfiles_exist() {
    if [ ! -d "$DOTFILES_PATH" ]; then
        echo -e "${RED}ERROR:${NC} dotfiles folder not found at $DOTFILES_PATH"
        exit 1
    fi
}

version() {
    check_if_dotfiles_exist

    echo -e "${GREEN}dotfiles version:${NC} $(git -C $DOTFILES_PATH describe --tags --abbrev=0)"
    exit 0
}

check_if_stow_exists() {
    if ! command -v stow >/dev/null 2>&1; then
        echo -e "${RED}ERROR:${NC} stow not found."
        echo

        read -p "Do you want to install stow? [y/N] " -r
        echo

        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo pacman --noconfirm -S stow
        fi
    fi
}

stow_dotfiles() {
    check_if_dotfiles_exist
    check_if_stow_exists

    echo -e "${GREEN}Stowing dotfiles..."
    stow --no-folding -d $DOTFILES_PATH \
        alacritty \
        bspwm \
        dunst \
        git \
        neofetch \
        nvim \
        picom \
        polybar \
        ranger \
        rofi \
        scripts \
        shell \
        starship \
        sxhkd \
        xorg
}

unstow_dotfiles() {
    check_if_dotfiles_exist
    check_if_stow_exists

    echo -e "${GREEN}Unstowing dotfiles..."
    stow --no-folding -d $DOTFILES_PATH --delete \
        alacritty \
        bspwm \
        dunst \
        git \
        neofetch \
        nvim \
        picom \
        polybar \
        ranger \
        rofi \
        scripts \
        shell \
        starship \
        sxhkd \
        xorg
}

pull_dotfiles() {
    check_if_dotfiles_exist

    echo -e "${GREEN}Pulling dotfiles..."

    git -C $DOTFILES_PATH pull
}

setup_arch() {
    PKGS=(
        'stow'                  # symbolic link manager

        # System
        'xorg'
        'xorg-xinit'
        'reflector'             # mirror manager
        'gufw'

        # Environment
        'bspwm'                 # window manager
        'sxhkd'                 # hotkey daemon
        'rofi'                  # launcher
        'nitrogen'              # wallpaper manager
        'picom'                 # compositor
        'dunst'                 # notifcations
        
        'alacritty'             # terminal emulator
        'starship'              # prompt
        'pcmanfm'               # gui file manager
        'ranger'                # terminal file manager
        'ueberzug'              # image previewer for ranger
        'neofetch'              # system information tool
        'numlockx'              # numlock control

        # Shell (zsh)
        'zsh'
        'zsh-autosuggestions'
        'zsh-syntax-highlighting'
        'zsh-history-substring-search'

        # Display manager
        'lightdm'
        'lightdm-gtk-greeter'

        # Fonts
        'ttf-font-awesome'      # icons
        'ttf-cascadia-code'     # theme font

        # Misc
        'neovim'                # default terminal editor
        'discord'               # chat
        'redshift'              # screen color temperature
        'thunderbird'           # email client
        'keepassxc'             # password manager
        'vlc'                   # video player
        # 'libqalcuate'           # terminal calculator
        'gimp'                  # image editor
        'pass'                  # password manager
        'qbittorrent'
        'libsecret'
        'polkit-gnome'
        'htop'
        'xdg-utils'
        'xdg-user-dirs'

        # Drivers
        # 'openrgb'               # logitech g815 editor

        # Audio
        'pipewire'              # sound server
        'pipewire-alsa'         # pipewire alsa replacement
        'pipewire-pulse'        # pipewire pulse replacement
        'wireplumber'           # pipewire gui
        'pavucontrol'           # gui volume control
#       'playerctl'             # player controls
#       'amixer'                # alsa cli mixer

        # Printer
        'cups'

        # Development
        'git'
        'github-cli'
        'docker'
        'docker-compose'
        'php'
        'npm'

        # Utils
        # 'filelight'         # diskspace
        'pacman-contrib'    # pacman utils
        'fzf'               # fuzzy finder
        'ripgrep'           # search tool
        'flameshot'         # screenshots
        'lxappearance'      # GTK appearance editor
        'xclip'             # clipboard
        'bat'               # replacement for cat
        'exa'               # replacement for ls
        'tldr'              # simplify man pages
    )

    AUR_PKGS=(
        'megasync-bin'
        'polybar'
        'tableplus'
        'visual-studio-code-bin'
        'ttf-ms-fonts'
        'brave-bin'
    )

    echo
    echo "1) amd-ucode 2) intel-ucode 3) Skip"
    read -r -p "Processor (default = 1): " choice

    case $choice in 
    [1])
        PKGS+='amd-ucode'
        ;;
    [2])
        PKGS+='intel-ucode'
        ;;
    [3])
        ;;
    [*])
        PKGS+='amd-ucode'
        ;;
    esac

    echo
    echo "1) xf86-video-amdgpu 2) xf86-video-intel 3) nvidia 4) Skip"
    read -r -p "GPU driver (default = 1): " choice

    case $choice in 
    [1])
        PKGS+='xf86-video-amdgpu'
        ;;
    [2])
        PKGS+='xf86-video-intel'
        ;;
    [3])
        PKGS+=(
            'nvidia'
            'nvidia-settings'
            'nvidia-utils'
        )
        ;;
    [4])
        ;;
    [*])
        PKGS+='xf86-video-amdgpu'
        ;;
    esac

    echo
    echo "1) timeshift 2) snapper 3) Skip"
    read -r -p "Backup package (default = 1): " choice

    case $choice in 
    [1])
        AUR_PKGS+='timeshift'
        ;;
    [2])
        PKGS+='snapper'
        ;;
    [3])
        ;;
    [*])
        AUR_PKGS+='timeshift'
        ;;
    esac

    stow_dotfiles

    echo
    echo -e "${BLUE}::${NC} ${BOLD}Updating pacman conf..."

    sudo sed -i 's/^#Color/Color/' /etc/pacman.conf
    sudo sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf

    echo
    echo -e "${BLUE}::${NC} ${BOLD}Installing packages..."

    sudo pacman -S --needed --noconfirm ${PKGS[@]}

    if ! command -v yay &> /dev/null
    then
        echo "YAY doesn't exist. Installing..."
        git clone https://aur.archlinux.org/yay-git ~/yay
        cd ~/yay
        makepkg -si
        rm -rf ~/yay
    fi

    echo
    echo -e "${BLUE}::${NC} ${BOLD}Installing AUR packages..."

    yay -S --needed --noconfirm ${AUR_PKGS[@]}

    echo
    echo -e "${BLUE}::${NC} ${BOLD}Enabling services..."

    sudo systemctl enable NetworkManager
    sudo systemctl enable reflector.timer
    sudo systemctl enable fstrim.timer
    sudo systemctl enable lightdm
    sudo systemctl enable --user redshift.service
    sudo systemctl enable cups.service
    sudo systemctl enable docker
    
    echo
    echo -e "${BLUE}::${NC} ${BOLD}Setting up docker..."

    if ! grep -q docker /etc/group
    then
        sudo groupadd docker
    fi

    sudo usermod -aG docker $USER

    sudo chsh -s /usr/bin/zsh $USER

    mkdir $HOME/.cache/zsh
    touch $HOME/.cache/zsh/history

    echo -e "${GREEN}Done! Please reboot."
}

vimplug_install() {
    sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
}

if [ $# -gt 0 ]; then
    # Show dotfiles usage
    if [ "$1" == "--help" ]; then
        shift 1
        usage

    # Show dotfiles version
    elif [ "$1" == "--version" ] || [ "$1" == "-v" ]; then
        shift 1
        version

    # Pull dotfile changes
    elif [ "$1" == "pull" ]; then
        shift 1
        pull_dotfiles

    # Stow dotfiles
    elif [ "$1" == "stow" ]; then
        shift 1
        stow_dotfiles

    # Unstow dotfiles
    elif [ "$1" == "unstow" ]; then
        shift 1
        unstow_dotfiles

    # Install vimplug
    elif [ "$1" == "vp:install" ]; then
        shift 1
        vimplug_install

    # Arch setup
    elif [ "$1" == "arch:setup" ]; then
        shift 1
        setup_arch

    fi
else
    usage
fi
